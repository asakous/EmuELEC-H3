diff -Naur old/es-core/src/resources/Font.cpp new/es-core/src/resources/Font.cpp
--- old/es-core/src/resources/Font.cpp	2019-12-13 10:16:09.000000000 +0800
+++ new/es-core/src/resources/Font.cpp	2019-12-20 11:07:58.142181585 +0800
@@ -551,6 +551,110 @@
 
 //the worst algorithm ever written
 //breaks up a normal string with newlines to make it fit xLen
+// utf8 stuff
+size_t Font::getNextCursor(const std::string& str, size_t cursor)
+{
+	// compare to character at the cursor
+	const char& c = str[cursor];
+
+	size_t result = cursor;
+	if((c & 0x80) == 0) // 0xxxxxxx, one byte character
+	{
+		result += 1;
+	}
+	else if((c & 0xE0) == 0xC0) // 110xxxxx, two bytes left in character
+	{
+		result += 2;
+	}
+	else if((c & 0xF0) == 0xE0) // 1110xxxx, three bytes left in character
+	{
+		result += 3;
+	}
+	else if((c & 0xF8) == 0xF0) // 11110xxx, four bytes left in character
+	{
+		result += 4;
+	}
+	else
+	{
+		// error, invalid utf8 string
+		
+		// if this assert is tripped, the cursor is in the middle of a utf8 code point
+		assert((c & 0xC0) != 0x80); // character is 10xxxxxx
+
+		// if that wasn't it, something crazy happened
+		assert(false);
+	}
+
+	if(str.length() < result || result < cursor) // don't go beyond the very end of the string, try and catch overflow
+		return cursor;
+	return result;
+}
+std::string Font::wrapText(std::string text, float xLen)
+{
+	std::string out;
+	std::string line, word;
+
+	size_t pos = 0, pos2 = 0;
+	while (0 < text.length()) {
+		size_t n = pos;
+		for (; n < (int)text.length(); n++) {
+			if (pos == 0 && xLen < sizeText(text.substr(pos, n)).x()) {
+				n--;
+				break;
+			}
+			char c = text[n];
+			if ('0' <= c && c <= '9') continue;
+			if ('A' <= c && c <= 'Z') continue;
+			if ('a' <= c && c <= 'z') continue;
+			if ('-' == c) continue;
+			if ('_' == c) continue;
+			if ('\'' == c) continue;
+			if (',' == c) continue;
+			if ('.' == c) continue;
+			break;
+		}
+		
+		size_t p;
+		if (pos < n) {
+			p = n;
+		} else {
+			p = Font::getNextCursor(text, pos);
+			if (p == pos) {
+				break;
+			}
+		}
+
+		if (text[pos] == '\n') {
+			out += text.substr(0, pos + 1);
+			text.erase(0, p);
+			pos2 = pos = p = 0;
+			continue;
+		}
+		
+		if (xLen < sizeText(text.substr(0, p)).x()) {
+			size_t cut;
+			if (0 < pos) {
+				cut = pos;
+			} else {
+				cut = p;
+			}
+
+			out += text.substr(0, cut) + "\n";
+			text.erase(0, cut);
+			pos2 = pos = p = 0;
+			n = 0;
+			continue;
+		} else {
+			pos2 = pos;
+			pos = p;
+		}
+	}
+
+	out += text;
+
+	return out;
+}
+/*
 std::string Font::wrapText(std::string text, float xLen)
 {
 	std::string out;
@@ -590,7 +694,7 @@
 
 	return out;
 }
-
+*/
 Vector2f Font::sizeWrappedText(std::string text, float xLen, float lineSpacing)
 {
 	text = wrapText(text, xLen);
diff -Naur old/es-core/src/resources/Font.h new/es-core/src/resources/Font.h
--- old/es-core/src/resources/Font.h	2019-11-26 10:13:01.000000000 +0800
+++ new/es-core/src/resources/Font.h	2019-12-20 11:12:55.350502158 +0800
@@ -72,6 +72,9 @@
 
 	size_t getMemUsage() const; // returns an approximation of VRAM used by this font's texture (in bytes)
 	static size_t getTotalMemUsage(); // returns an approximation of total VRAM used by font textures (in bytes)
+	
+	// utf8 stuff
+	static size_t getNextCursor(const std::string& str, size_t cursor);
 
 private:
 	static FT_Library sLibrary;
